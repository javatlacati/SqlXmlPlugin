package cz.syntea.nb.sqlxml.plugin.output;

/*
 *  Copyright 2009 Syntea software group a.s.
 *
 *  This file may be used, copied, modified and distributed only in accordance
 *  with the terms of the limited licence contained in the accompanying
 *  file LICENSE.TXT.
 *
 *  Tento soubor muze byt pouzit, kopirovan, modifikovan a siren pouze v souladu
 *  s licencnimi podminkami uvedenymi v prilozenem souboru LICENSE.TXT.
 */

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Serializable;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.text.EditorKit;
import org.openide.text.CloneableEditorSupport;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public final class XDCMOutputTopComponent extends TopComponent {

  private static XDCMOutputTopComponent instance;
  /** path to the icon used by the component and its open action */
  public static final String PATH_ICON_SAVE = "cz/syntea/nb/sqlxml/plugin/save.png";
  public static final String PATH_ICON_COPY = "cz/syntea/nb/sqlxml/plugin/copy.png";
  public static final String PATH_ICON_RUN = "cz/syntea/nb/sqlxml/plugin/run.png";
  private static final String PREFERRED_ID = "XDCMOutputTopComponent";
  private static final long serialVersionUID = 8309390065262805339L;

  private XDCMOutputTopComponent() {
	initComponents();
	setName("SQLXML");
	setToolTipText("SQLXML Output");
	setIcon(ImageUtilities.loadImage(PATH_ICON_RUN, true));
        saveButton.setIcon(ImageUtilities.loadImageIcon(PATH_ICON_SAVE, true));
        copyButton.setIcon(ImageUtilities.loadImageIcon(PATH_ICON_COPY, true));
	EditorKit kit = CloneableEditorSupport.getEditorKit("text/xml");
	jEditorPane1.setEditorKit(kit);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        saveButton.setToolTipText("Save to file"); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);

        copyButton.setToolTipText("Copy to clipboard"); // NOI18N
        copyButton.setFocusable(false);
        copyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(copyButton);

        jScrollPane1.setViewportView(jEditorPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 340, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        FileOutputStream   fos = null;
        OutputStreamWriter osw = null;
      try {
          JFileChooser chooser = new JFileChooser();
         // chooser.setAccessory(new JLabel("baf"));
          chooser.setApproveButtonText("Save");
          int saveDialog = chooser.showSaveDialog(this);
          if(JFileChooser.APPROVE_OPTION != saveDialog) {
              return;
          }
          File file = chooser.getSelectedFile();
          fos = new FileOutputStream(file);
          osw = new OutputStreamWriter(fos, "UTF-8");
          osw.append(XmlUtils.format(jEditorPane1.getText(), "UTF-8"));
          osw.flush();
      } catch (IOException ex) {
          Exceptions.printStackTrace(ex);
      } finally {
          try {
              if(null != osw) {
                  osw.close();
              }
              if(null != fos) {
                  fos.close();
              }
          } catch (IOException ex) {
              Exceptions.printStackTrace(ex);
          }
      }


    }//GEN-LAST:event_saveButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed

        ClipBoard clip = new ClipBoard();
        clip.setClipboardContents(jEditorPane1.getText());

    }//GEN-LAST:event_copyButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance.Do not use directly: reserved for *.settings files
     * only, i.e. deserialization routines; otherwise you could get a
     * non-deserialized instance. To obtain the singleton instance, use
     * {@link #findInstance}.
     *
     * @return
     */
  public static synchronized XDCMOutputTopComponent getDefault() {
	if (null == instance) {
	  instance = new XDCMOutputTopComponent();
	}
	return instance;
  }

    /**
     * Obtain the XDCMOutputTopComponent instance.Never call {@link #getDefault}
     * directly!
     *
     * @return
     */
  public static synchronized XDCMOutputTopComponent findInstance() {
	TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
	if (null == win) {
	  Logger.getLogger(XDCMOutputTopComponent.class.getName()).warning(
			  "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
	  return getDefault();
	}
	if (win instanceof XDCMOutputTopComponent) {
	  return (XDCMOutputTopComponent) win;
	}
	Logger.getLogger(XDCMOutputTopComponent.class.getName()).warning(
			"There seem to be multiple components with the '" + PREFERRED_ID
			+ "' ID. That is a potential source of errors and unexpected behavior.");
	return getDefault();
  }

  @Override
  public int getPersistenceType() {
	return TopComponent.PERSISTENCE_NEVER;
  }

  @Override
  public void componentOpened() {
	// TODO add custom code on component opening
  }

  @Override
  public void componentClosed() {
	// TODO add custom code on component closing
  }

    /**
     * replaces this in object stream
     *
     * @return
     */
  @Override
  public Object writeReplace() {
	return new ResolvableHelper();
  }

  @Override
  protected String preferredID() {
	return PREFERRED_ID;
  }

  final static class ResolvableHelper implements Serializable {

	private static final long serialVersionUID = -2533823278918754560L;

	public Object readResolve() {
	  return XDCMOutputTopComponent.getDefault();
	}
  }
  private static final String MODE = "output"; // NOI18N

  @Override
  public void open() {
	Mode mode = WindowManager.getDefault().findMode(MODE);
	mode.dockInto(this);
	super.open();
  }

  public void printXML(String xml) {
	jEditorPane1.setText(xml);
  }
}
